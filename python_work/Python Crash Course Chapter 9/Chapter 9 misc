# class Dog():
# 	"""A simple attempt to model a dog."""

# 	def __init__(self, name, age):
# 		"""Inititalize name and age attributes."""
# 		self.name = name
# 		self.age = age

# 	def sit(self):
# 		"""Simulate a sog sitting in response to a command."""
# 		print(self.name.title() + " is now sitting.")

# 	def roll_over(self):
# 		"""Simulate rolling over in response to a command."""
# 		print(self.name.title() + " rolled over!")	

# my_dog = Dog('willie', 6)
# your_dog = Dog('lucy', 3)

# print("My dog's name is " + my_dog.name.title() + ".")
# print("My dog is " + str(my_dog.age) + " years old.")

# my_dog.sit()
# my_dog.roll_over()

# print("\nYour dog's name is " + your_dog.name.title() + ".")
# print("Your dog is " + str(your_dog.age) + " years old.")
# your_dog.sit()


# class Car():
# 	"""A simple attempt to represent a car."""

# 	def __init__(self,make,model,year):
# 		"""Initialize attributes to describe a car."""
# 		self.make = make
# 		self.model = model
# 		self.year = year
# 		self.odometer_reading = 0

# 	def get_descriptive_name(self):
# 		"""Return a neatly formatted descriptive name."""
# 		long_name = str(self.year) + ' ' + self.make + ' ' + self.model	
# 		return long_name.title()

# 	def read_odometer(self):
# 		"""Print a statement showing the car's mileage."""
# 		print("This car has " + str(self.odometer_reading) + " miles on it.")

# 	def update_mileage(self,mileage):
# 		"""
# 		Set the odometer reading to a certain value.
# 		Reject the change if it attempts to roll the odometer back.
# 		"""
# 		if mileage >= self.odometer_reading:
# 			self.odometer_reading = mileage	
# 		else:
# 			print("You can't roll back an odometer!")	

# 	def increment_odometer(self,miles):
# 		"""Add the given amount to the odometer reading."""
# 		self.odometer_reading += miles

# my_used_car = Car('subaru', 'outback', 2013)
# print(my_used_car.get_descriptive_name())

# my_used_car.update_mileage(23500)
# my_used_car.read_odometer()			

# my_used_car.increment_odometer(100)
# my_used_car.read_odometer()	


# my_new_car = Car('audi', 'a4', 2016)
# print(my_new_car.get_descriptive_name())
# Modifying an Attribute's Value Directly
# my_new_car.odometer_reading = 23

# Using update_mileage function, update an 
# attribute's value through a method
# my_new_car.update_mileage(23)

# my_new_car.read_odometer()


class Car():
	"""A simple attempt to represent a car."""

	def __init__(self,make,model,year):
		"""Initialize attributes to describe a car."""
		self.make = make
		self.model = model
		self.year = year
		self.odometer_reading = 0

	def get_descriptive_name(self):
		"""Return a neatly formatted descriptive name."""
		long_name = str(self.year) + ' ' + self.make + ' ' + self.model	
		return long_name.title()

	def read_odometer(self):
		"""Print a statement showing the car's mileage."""
		print("This car has " + str(self.odometer_reading) + " miles on it.")

	def update_mileage(self,mileage):
		"""
		Set the odometer reading to a certain value.
		Reject the change if it attempts to roll the odometer back.
		"""
		if mileage >= self.odometer_reading:
			self.odometer_reading = mileage	
		else:
			print("You can't roll back an odometer!")	

	def increment_odometer(self,miles):
		"""Add the given amount to the odometer reading."""
		self.odometer_reading += miles




class Battery():
	"""A simple attempt to model a battery for an electric car."""

	def __init__(self, battery_size=70):
		"""Initialize the battery's attributes."""
		self.battery_size = battery_size

	def describe_battery(self):
		"""Print a statement describing the battery size."""
		print("This card has a " + str(self.battery_size) + "-kWh battery.")

	def get_range(self):
		"""Print a ststement about the range this battery provides."""
		if self.battery_size == 70:
			range = 240
		elif self.battery_size == 85:
			range = 270

		message = "This car can go approximately "	+ str(range) + " miles on a full charge."
	##	message += " miles on a full charge."
		print(message)





class ElectricCar(Car):
	"""Represent aspects of a car, specific to electric vehicles."""

	def __init__(self, make, model, year):
		"""
		Initialize attributes of the parent class.
		Then initialize attributes specific to an electirc car.
		"""
		super().__init__(make, model, year)
		self.battery = Battery()



my_tesla = ElectricCar('tesla', 'model s', 2016)
print(my_tesla.get_descriptive_name())
my_tesla.battery.describe_battery()
my_tesla.battery.get_range()


